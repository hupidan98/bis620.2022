---
title: "DS$^3$ 2022-12-01"
format: html
---

# Vignettes

```{r eval = FALSE}
library(usethis)
use_vignette("bis620")
browseVignettes()
```

# The OLS Example From Last Time

## Load the bis620.2022 conda environment

```{r eval = FALSE}
library(reticulate)
use_condaenv("bis620.2022", required = TRUE)
conda_install("bis620.2022", "multiprocess")
py_config()
```

```{python}
import numpy as np

def ols(Y, X):
    q, r = np.linalg.qr(X)
    return(np.linalg.inv( r ).dot( q.T ).dot( Y ))
```

```{r}
#py$ols(as.matrix(iris$Sepal.Length), model.matrix(~ ., iris[,2:4]))
lm(Sepal.Length ~ ., iris[,-5])
```

# Back to iterators.

```{r}
library(foreach)
registerDoSEQ()
system.time({
  foreach(it = icount(10), .combine = c) %dopar% {
    Sys.sleep(1)
    it + 1
  }
})
```

```{r}
library(future)
library(doFuture)
plan(multisession, workers = 5)
registerDoFuture()
system.time({
  foreach(it = icount(10), .combine = c) %dopar% {
    Sys.sleep(1)
    it + 1
  }
})
```

```{python}
def icount(n = None):
    if not isinstance(n, int):
        raise ValueError("n must be an integer.")
    i = 0
    while n is None or i < n:
        yield i
        i += 1
```

```{python error = TRUE}
it = icount(2)
next(it)
next(it)
next(it)
```

```{python}
import multiprocess as mp
import time

def add_one(x):
    time.sleep(1)
    return x + 1
    
p = mp.Pool(processes = 5)
start = time.time()
p.map(add_one, icount(10))
end = time.time()
print(end - start)
```

# Dispatch

```{r}
# R
add_one <- function(x) {
  UseMethod("add_one", x)
}
add_one.default <- function(x) {
  stop(paste("Don't know how to add_one to object of type", class(x)))
}
add_one.numeric <- function(x) {
  print("Dispatched to `add_one.numeric`.")
  x
}
cat("Calling add_one on a.")
add_one("a")
cat("Calling foo on the number 1.")
add_one(1)
```

```{r}
print_methods <- methods(print)
print(head(print_methods, 20))
```

```{r}
library(R6)
library(purrr)

AddOneToNumericList = 
  R6Class(
    "AddOneToNumericList",
    public = list(
      lst = NULL,
      initialize = function(lst) {
        if (!all(map_lgl(lst, is.numeric))) {
          stop("All list elements must be int or flot.")
        }
        self$lst = lst
      },
      add_one = function() {
        self$lst = map(self$lst, ~ .x + 1)
      },
      get_lst = function() {
        self$lst
      }
    )
  )

al = AddOneToNumericList$new(list(1:3, pi))
al$add_one()
al$get_lst()
```

```{python}
class AddOneToNumericList:
    def __init__(self, lst):
        if any( [not isinstance(x, (float, int)) for x in lst] ):
            raise TypeError("All list elements must be int or float")
        self.lst = lst
    def add_one(self):
        self.lst = [x + 1 for x in self.lst]
    def get_lst(self):
        return(self.lst)
      
my_new_object = AddOneToNumericList(list(range(1, 11)))
print(my_new_object.lst)
my_new_object.add_one()
print(my_new_object.lst)
```